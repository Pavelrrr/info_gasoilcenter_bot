import os
import logging
from dotenv import load_dotenv
from aiogram import Bot, Dispatcher
from aiogram.enums import ParseMode
from aiogram.types import Message, CallbackQuery, InlineKeyboardButton, InlineKeyboardMarkup
from aiogram.filters import Command
from aiogram.utils.keyboard import InlineKeyboardBuilder
from services import set_user_state, get_user_state
from services import get_well_list_ydb, get_well_description_ydb
from aiogram.client.default import DefaultBotProperties

MAX_MESSAGE_LENGTH = 4096
load_dotenv()
def split_message(text, max_length=MAX_MESSAGE_LENGTH):
    # –†–∞–∑–±–∏–≤–∞–µ—Ç —Ç–µ–∫—Å—Ç –Ω–∞ —á–∞—Å—Ç–∏ –ø–æ –≥—Ä–∞–Ω–∏—Ü–µ —Å—Ç—Ä–æ–∫–∏ –∏–ª–∏ –ø—Ä–æ–±–µ–ª–∞, —á—Ç–æ–±—ã –Ω–µ —Ä–µ–∑–∞—Ç—å —Å–ª–æ–≤–∞
    parts = []
    while text:
        if len(text) <= max_length:
            parts.append(text)
            break
        part = text[:max_length]
        last_n = part.rfind('\n')
        last_sp = part.rfind(' ')
        split_at = max(last_n, last_sp)
        if split_at == -1:
            split_at = max_length
        parts.append(text[:split_at])
        text = text[split_at:].lstrip()
    return parts



# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
TELEGRAM_TOKEN = os.environ.get("TELEGRAM_TOKEN")
logger = logging.getLogger(__name__)

# # –ü–æ–ª—É—á–∞–µ–º ID —Ç–∞–±–ª–∏—Ü –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
# SHEET_IDS = {
#     "drilling": os.environ.get("DRILLING_SHEET_ID"),
#     "completion": os.environ.get("COMPLETION_SHEET_ID")
# }

def setup_bot():
    return Bot(
        token=TELEGRAM_TOKEN,
        default=DefaultBotProperties(parse_mode=ParseMode.HTML)
    )

def setup_dispatcher():
    """–°–æ–∑–¥–∞–µ—Ç –∏ –Ω–∞—Å—Ç—Ä–∞–∏–≤–∞–µ—Ç –¥–∏—Å–ø–µ—Ç—á–µ—Ä"""
    dp = Dispatcher()
    
    # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –≤—Å–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
    register_all_handlers(dp)
    
    return dp

def register_all_handlers(dp: Dispatcher):
    """–†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ—Ç –≤—Å–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏"""
    register_start_handlers(dp)
    register_wells_handlers(dp)

def register_wells_handlers(dp: Dispatcher):
    """–†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ—Ç –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –≤—ã–±–æ—Ä–∞ —Ä–µ–∂–∏–º–∞ –∏ —Å–∫–≤–∞–∂–∏–Ω"""
    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "–ù–∞—á–∞—Ç—å"
    dp.callback_query.register(
        process_start_button,
        lambda c: c.data == "start_bot"
    )
    
    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ —Ä–µ–∂–∏–º–∞
    dp.callback_query.register(
        process_mode_selection,
        lambda c: c.data in ["drilling", "completion"]
    )
    
    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–æ–∑–≤—Ä–∞—Ç–∞ –∫ —Å–ø–∏—Å–∫—É —Å–∫–≤–∞–∂–∏–Ω
    dp.callback_query.register(
        process_back_to_wells,
        lambda c: c.data == "back_to_wells"
    )
    
    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ —Å–∫–≤–∞–∂–∏–Ω—ã (–≤—Å–µ –æ—Å—Ç–∞–ª—å–Ω—ã–µ –∫–æ–ª–±—ç–∫–∏)
    dp.callback_query.register(process_well_selection)

async def cmd_start(message: Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start"""
    try:
        logger.info(f"Processing /start command from user {message.from_user.id}")
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ —Å –∫–Ω–æ–ø–∫–æ–π "–ù–∞—á–∞—Ç—å"
        builder = InlineKeyboardBuilder()
        builder.button(text="üöÄ –ù–∞—á–∞—Ç—å", callback_data="start_bot")
        
        await message.answer(
            "üîß –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –±–æ—Ç –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å–æ —Å–∫–≤–∞–∂–∏–Ω–∞–º–∏!\n\n"
            "–ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ –¥–ª—è –Ω–∞—á–∞–ª–∞ —Ä–∞–±–æ—Ç—ã:",
            reply_markup=builder.as_markup()
        )
    except Exception as e:
        logger.error(f"Error in start command: {str(e)}")
        await message.answer("‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∫–æ–º–∞–Ω–¥—ã")

def register_start_handlers(dp: Dispatcher):
    """–†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ—Ç –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥—ã —Å—Ç–∞—Ä—Ç"""
    dp.message.register(cmd_start, Command("start"))

async def process_mode_selection(callback: CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ —Ä–µ–∂–∏–º–∞"""
    try:
        user_id = callback.from_user.id
        mode = callback.data
        logger.info(f"User {user_id} selected mode: {mode}")
        
        if not mode:
            logger.error(f"Mode is empty or None: {mode}")
            await callback.message.answer("‚ö†Ô∏è –û—à–∏–±–∫–∞: –Ω–µ –≤—ã–±—Ä–∞–Ω —Ä–µ–∂–∏–º")
            await callback.answer()
            return
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—ã–±—Ä–∞–Ω–Ω—ã–π —Ä–µ–∂–∏–º
        await set_user_state(user_id, mode)
        
        # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ —Å–∫–≤–∞–∂–∏–Ω
        wells = await get_well_list_ydb(mode)
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ —Ä–µ–∂–∏–º–∞ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
        mode_text = "–ë—É—Ä–µ–Ω–∏–µ" if mode == "drilling" else "–û—Å–≤–æ–µ–Ω–∏–µ"
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–ª–∞–≤–∏–∞—Ç—É—Ä–æ–π –≤—ã–±–æ—Ä–∞ —Å–∫–≤–∞–∂–∏–Ω—ã
        await callback.message.edit_text(
            f"üîß <b>–†–µ–∂–∏–º: {mode_text}</b>\n\n"
            "–í—ã–±–µ—Ä–∏—Ç–µ —Å–∫–≤–∞–∂–∏–Ω—É:",
            reply_markup=get_wells_keyboard(wells)
        )
        await callback.answer()
    except Exception as e:
        logger.error(f"Error processing mode selection: {str(e)}")
        await callback.message.edit_text("‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –¥–∞–Ω–Ω—ã—Ö")
        await callback.answer()



async def process_well_selection(callback: CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ —Å–∫–≤–∞–∂–∏–Ω—ã"""
    try:
        user_id = callback.from_user.id
        well_number = callback.data

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã –Ω–∞–≤–∏–≥–∞—Ü–∏–∏
        if well_number == "back_to_modes":
            await callback.message.edit_text(
                "–í—ã–±–µ—Ä–∏—Ç–µ —Ä–µ–∂–∏–º —Ä–∞–±–æ—Ç—ã:",
                reply_markup=get_mode_keyboard()
            )
            await callback.answer()
            return

        if well_number == "back_to_start":
            builder = InlineKeyboardBuilder()
            builder.button(text="üöÄ –ù–∞—á–∞—Ç—å", callback_data="start_bot")
            await callback.message.edit_text(
                "üîß –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –±–æ—Ç –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å–æ —Å–∫–≤–∞–∂–∏–Ω–∞–º–∏!\n\n"
                "–ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ –¥–ª—è –Ω–∞—á–∞–ª–∞ —Ä–∞–±–æ—Ç—ã:",
                reply_markup=builder.as_markup()
            )
            await callback.answer()
            return

        # –ü–æ–ª—É—á–∞–µ–º —Ä–µ–∂–∏–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        mode = await get_user_state(user_id)

        if mode:
            logger.info(f"Processing well selection {well_number} in mode {mode}")

            # –ü–æ–ª—É—á–∞–µ–º –æ–ø–∏—Å–∞–Ω–∏–µ —Å–∫–≤–∞–∂–∏–Ω—ã
            description = await get_well_description_ydb(well_number)

            # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–∞–º–∏ –≤–æ–∑–≤—Ä–∞—Ç–∞
            builder = InlineKeyboardBuilder()
            builder.row(
                InlineKeyboardButton(text="üîô –ö —Å–ø–∏—Å–∫—É —Å–∫–≤–∞–∂–∏–Ω", callback_data="back_to_wells"),
                InlineKeyboardButton(text="üîÑ –ö –≤—ã–±–æ—Ä—É —Ä–µ–∂–∏–º–∞", callback_data="back_to_modes")
            )
            builder.row(
                InlineKeyboardButton(text="üè† –í –Ω–∞—á–∞–ª–æ", callback_data="back_to_start")
            )

            full_text = f"üîπ –°–∫–≤–∞–∂–∏–Ω–∞ {well_number}\n\nüìã –û–ø–∏—Å–∞–Ω–∏–µ —Ä–∞–±–æ—Ç:\n{description}"
            parts = split_message(full_text)

            # –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
            await callback.message.delete()

            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤—Å–µ —á–∞—Å—Ç–∏, –∫—Ä–æ–º–µ –ø–æ—Å–ª–µ–¥–Ω–µ–π, –±–µ–∑ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã
            for part in parts[:-1]:
                await callback.message.answer(part)

            # –ü–æ—Å–ª–µ–¥–Ω—é—é —á–∞—Å—Ç—å –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å –∫–ª–∞–≤–∏–∞—Ç—É—Ä–æ–π
            await callback.message.answer(parts[-1], reply_markup=builder.as_markup())

            await callback.answer()
        else:
            await callback.answer("–†–µ–∂–∏–º –Ω–µ –≤—ã–±—Ä–∞–Ω.")
    except Exception as e:
        logger.error(f"Error processing well selection: {str(e)}")
        await callback.answer("‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –æ–ø–∏—Å–∞–Ω–∏—è")


def get_mode_keyboard():
    """–°–æ–∑–¥–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –≤—ã–±–æ—Ä–∞ —Ä–µ–∂–∏–º–∞"""
    builder = InlineKeyboardBuilder()
    builder.button(text="üîß –ë—É—Ä–µ–Ω–∏–µ", callback_data="drilling")
    builder.button(text="üõ† –û—Å–≤–æ–µ–Ω–∏–µ", callback_data="completion")
    builder.adjust(2)  # –î–≤–∞ —Ä–µ–∂–∏–º–∞ –≤ –æ–¥–Ω–æ–º —Ä—è–¥—É
    
    # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –≤–æ–∑–≤—Ä–∞—Ç–∞
    builder.row(
        InlineKeyboardButton(text="üè† –í –Ω–∞—á–∞–ª–æ", callback_data="back_to_start")
    )
    
    return builder.as_markup()

def get_wells_keyboard(wells, row_width=3):
    """–°–æ–∑–¥–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –≤—ã–±–æ—Ä–∞ —Å–∫–≤–∞–∂–∏–Ω—ã —Å –∫–Ω–æ–ø–∫–æ–π –≤–æ–∑–≤—Ä–∞—Ç–∞"""
    builder = InlineKeyboardBuilder()
    
    # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ —Å–∫–≤–∞–∂–∏–Ω
    for well in wells:
        builder.button(text=well, callback_data=well)
    
    # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º —Ä–∞—Å–ø–æ–ª–æ–∂–µ–Ω–∏–µ –∫–Ω–æ–ø–æ–∫ —Å–∫–≤–∞–∂–∏–Ω
    builder.adjust(row_width)
    
    # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏ –≤ –æ—Ç–¥–µ–ª—å–Ω—ã–π —Ä—è–¥
    builder.row(
        InlineKeyboardButton(text="üîô –ö –≤—ã–±–æ—Ä—É —Ä–µ–∂–∏–º–∞", callback_data="back_to_modes"),
        InlineKeyboardButton(text="üè† –í –Ω–∞—á–∞–ª–æ", callback_data="back_to_start")
    )
    
    return builder.as_markup()

async def process_start_button(callback: CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ '–ù–∞—á–∞—Ç—å'"""
    try:
        logger.info(f"User {callback.from_user.id} pressed start button")
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –º–µ–Ω—é –≤—ã–±–æ—Ä–∞ —Ä–µ–∂–∏–º–∞
        await callback.message.edit_text(
            "–í—ã–±–µ—Ä–∏—Ç–µ —Ä–µ–∂–∏–º —Ä–∞–±–æ—Ç—ã:",
            reply_markup=get_mode_keyboard()
        )
        await callback.answer()
    except Exception as e:
        logger.error(f"Error processing start button: {str(e)}")
        await callback.answer("‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞")

async def process_back_to_wells(callback: CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–æ–∑–≤—Ä–∞—Ç–∞ –∫ —Å–ø–∏—Å–∫—É —Å–∫–≤–∞–∂–∏–Ω"""
    try:
        user_id = callback.from_user.id
        mode = await get_user_state(user_id)
        
        if mode:
            # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ —Å–∫–≤–∞–∂–∏–Ω –∑–∞–Ω–æ–≤–æ
            wells = await get_well_list_ydb(mode)
            
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–ø–∏—Å–æ–∫ —Å–∫–≤–∞–∂–∏–Ω
            mode_text = "–ë—É—Ä–µ–Ω–∏–µ" if mode == "drilling" else "–û—Å–≤–æ–µ–Ω–∏–µ"
            await callback.message.edit_text(
                f"üîß <b>–†–µ–∂–∏–º: {mode_text}</b>\n\n"
                "–í—ã–±–µ—Ä–∏—Ç–µ —Å–∫–≤–∞–∂–∏–Ω—É:",
                reply_markup=get_wells_keyboard(wells)
            )
            await callback.answer()
        else:
            await callback.message.edit_text(
                "–í—ã–±–µ—Ä–∏—Ç–µ —Ä–µ–∂–∏–º —Ä–∞–±–æ—Ç—ã:",
                reply_markup=get_mode_keyboard()
            )
            await callback.answer()
    except Exception as e:
        logger.error(f"Error returning to wells list: {str(e)}")
        await callback.answer("‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞")

def split_message(text, max_length=4000):
    """–†–∞–∑–±–∏–≤–∞–µ—Ç –¥–ª–∏–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–∞ —á–∞—Å—Ç–∏"""
    if len(text) <= max_length:
        return [text]
    
    messages = []
    while len(text) > max_length:
        # –ò—â–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–π –ø—Ä–æ–±–µ–ª –≤ –ø—Ä–µ–¥–µ–ª–∞—Ö –ª–∏–º–∏—Ç–∞
        split_pos = text.rfind(' ', 0, max_length)
        if split_pos == -1:  # –ï—Å–ª–∏ –Ω–µ—Ç –ø—Ä–æ–±–µ–ª–æ–≤, —Ä–µ–∂–µ–º –ø–æ –ª–∏–º–∏—Ç—É
            split_pos = max_length
        
        messages.append(text[:split_pos])
        text = text[split_pos:].lstrip()
    
    if text:  # –î–æ–±–∞–≤–ª—è–µ–º –æ—Å—Ç–∞—Ç–æ–∫
        messages.append(text)
    
    return messages